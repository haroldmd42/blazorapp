@page "/products"
@inject IProductService productService
@inject ILogger<Products> logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<PageTitle>Productos de la tienda</PageTitle>

<ModuleTitle Title="Productos de la tienda" />

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="mb-0">Listado de productos</h2>
    <button class="btn btn-dark" @onclick="@(() => NavigationManager.NavigateTo("/addProduct"))">
        <i class="bi bi-plus-circle me-2"></i> Crear nuevo producto
    </button>
</div>

@if (products?.Count > 0)
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
        @foreach (var product in products)
        {
            <div class="col">
                <div class="card h-100 shadow-sm border-0">
                    <img src="@product.Images[0]" class="card-img-top" alt="@product.Title" loading="lazy" style="height: 200px; object-fit: cover;" />
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@product.Title</h5>
                        <p class="card-text text-muted mb-2">Precio: <strong>@product.Price $</strong></p>
                        <button class="btn btn-outline-danger mt-auto" title="Eliminar"
                                @onclick="@(() => DeleteProduct(product))">
                            <i class="bi bi-trash me-1"></i> Eliminar
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="alert alert-warning text-center mt-4" role="alert">
        No hay productos para mostrar.
    </div>
}

@code {
    private List<Product> products = new();

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
        logger.LogInformation("Productos cargados correctamente");
    }

    private async Task GetProducts()
    {
        products = await productService.Get() ?? new List<Product>();
    }

    private async Task DeleteProduct(Product product)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar el producto {product.Title}?"))
        {
            return;
        }

        await productService.Delete(product.Id);
        ToastService.ShowSuccess("Producto eliminado correctamente");
        await GetProducts();
    }
}
