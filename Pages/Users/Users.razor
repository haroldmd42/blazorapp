@page "/users"
@inject IUserService userService
@inject ILogger<Users> logger
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<PageTitle>Usuarios</PageTitle>
<ModuleTitle Title="Usuarios" />
<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="mb-0">Listado de usuarios de lang pagina cambiadas</h2>
    <button class="btn btn-dark" @onclick="@(() => NavigationManager.NavigateTo("/addUser"))">
        <i class="bi bi-plus-circle me-2"></i> Crear nuevo usuario
    </button>
</div>

@if (users?.Count > 0)
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
        @foreach (var user in users)
        {
            <div class="col">
                <div class="card h-100 shadow-sm border-0">
                    <div class="card-body d-flex flex-column">
                        <img src="@user.Avatar" class="card-img-top rounded-circle mb-3" alt="@user.Name" style="width: 80px; height: 80px; object-fit: cover;" />
                        <h5 class="card-title">@user.Name</h5>
                        <p class="card-text text-muted mb-2">Email: <strong>@user.Email</strong></p>
                        <p class="card-text text-muted mb-2">Rol: <strong>@user.Role</strong></p>
                        <button class="btn btn-outline-danger mt-auto" title="Eliminar">
                            <i class="bi bi-trash me-1"></i> Eliminar
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="alert alert-warning text-center mt-4" role="alert">
        No hay usuarios para mostrar.
    </div>
}

@code {
    private List<User> users = new();

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        logger.LogInformation("Usuarios cargados correctamente");
    }
    private async Task GetUsers()
    {
        users = await userService.Get() ?? new List<User>();
    }
   /* private async Task DeleteUser(User user)
    {

        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar al usuario {user.Name}?"))
        {
            return; // El usuario canceló la acción
        }
        {
            await userService.Delete(user.Id);
            ToastService.ShowSuccess("Usuario eliminado correctamente.");
            await GetUsers();
        }
    }*/
}using blazorapp.Models;
#line default
